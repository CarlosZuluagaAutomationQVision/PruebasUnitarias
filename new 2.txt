Utilizando Mocks

1. Necesitamos que nuestras entradas y Entorno garanticen una salida específica, aca debido a estos entornos en donde los mocks entran a jugar un papel importante.

Primero vamos a incluir estas dependencia de jpa y de MySql:

	<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
      <version>2.3.1.RELEASE</version>
      <scope>compile</scope>
    </dependency> 
	
Con la JPA me permite tener acceso a datos,

    <dependency>
       <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.20</version>
        </dependency>
		
Con la de Mysql puedo simular la conexion a la BD

En el archivo application.properties incluimos los siguientes datos de conexion:

spring.datasource.url=jdbc:mysql://localhost:3306/academic?serverTimezone=UTC
spring.datasource.username=njug
spring.datasource.password=academic123


2. vamos a crear los siguientes modelos, repositorios y servicios:

enums: CategoriaDeProducto
	   Localidad

models: Impuesto 
		Producto

repositorios: repositorioDelImpuesto
			  repositorioDeProductos
	Estos nos van a garantizar el acceso a los datos.


servicio: ServicioDeProducto
	
		Lo que esta haciendo es calcular el monto a pagar, este depende de repositorioDeProductos nos encuentre un id de producto, que el producto este presente en BD y que este producto tenga un impuesto a pagar si lo tiene se le agrega, si no devuelve el valor del producto y si el idDeProducto no existe entonces nos devuelve la exception.



3. Bueno ya despúes de tener todos las clases implementadas vamos a implementar nuestra clase de Test

  Ponemos los Tags igual que en las pruebas anteriores: 
	@RunWith(SpringRunner.class)
	@SpringBootTest
  
  Instanciamos el servicio:
	@Autowired
    ServicioDeProductos servicioDeProductos;

  Creamos el metodo y lo marcamos como Test
    @Test
    public void pruebaCalculoTotalProducto() throws Exception {
      //Dado que
      int idProducto = 1;
      Localidad localidad = Localidad.MEDELLIN;

      //Cuando
      BigDecimal total = servicioDeProductos.calcularMontoAPagarPorProducto(idProducto, localidad);

      //Entonces
      assertEquals(new BigDecimal("10.5"), total);


    }

Ejecutamos y falla, esto pasa por que el metodo que estamos probando de calcularMontoAPagarPorProducto necesita de los repositorios y ps obviamente no los encuentra, y es aca donde Mockito entra a jugar. 
	
	
4. Vamos a instanciar los repositorioDeProductos y repositorioDelImpuesto.

	y aca entra la nueva anotacion @MockBean
	Nos va a permitir crear una instancia falsa que vamos a poder controlar, y este es el core de mockito.
	
	Primero agremamos este Tag a las instancias que estamos generando:
	
	@MockBean
    RepositorioDeImpuestos repositorioDeImpuestos;

    @MockBean
    RepositorioDeProductos repositorioDeProductos;
	
	Volvemos a ejecutar y vemos que vuelve a fallar, lo corremos en Debug y mostramos que lo que sucede es que el idProducto = 1 no existe.
	Esto sucede por que el Mock se encarga de insertar los elementos, pero aun no los hemos configurado dentro del Mock, ya que este devuelve un null.
	
5. 	Incluimos esta nuevo en el metodo del test:	
		
	public void pruebaDeCalculoDeImpuestos() throws Exception {
        //Dado que
        int idDelProducto = 1;
        Localidad localidad = Localidad.COLOMBIA;

	Aca vamos a definir la caracteristicas del producto, le definimos el valor del precio Unitario, como 1 (ONE), le definimos la Categoria como Electronicos y lo hacemos un productoOpcional que es lo que el repositorioDeProductos devuelve: 
	
        Producto producto = new Producto();
        producto.setPrecioUnitario(BigDecimal.ONE);
        producto.setCategoria(CategoriaDeProductos.ELECTRONICOS);
        Optional<Producto> productoOptional = Optional.of(producto);
	
	Aca viene lo interesan de Mockito: utilizando el when le estamos diciendo a Mockito que cuando encuentre en el repositorioDeProductos un idDeProducto = 1 "es el que estamos declarando en la parte de arriba", entonces retorne el producto con las carateristicas antes definidas.
		when(repositorioDeProductos.findById(idDelProducto)).thenReturn(productoOptional);


	Aca realizamos lo mismos pero para definir los valores del impuesto:
	
        Impuesto impuesto = new Impuesto();
        impuesto.setImporte(BigDecimal.valueOf(0.05));
        Optional<Impuesto> impuestoOptional = Optional.of(impuesto);
		
	Volvemos a utilizar el When y Then de Mockito:	
        when(repositorioDeImpuestos.findByLocalidadAndCategoria(Localidad.COLOMBIA, CategoriaDeProductos.ELECTRONICOS))
                .thenReturn(impuestoOptional);

        //Cuando
        BigDecimal resultado = servicioDeProductos.calcularMontoAPagarPorProducto(idDelProducto, localidad);

        //Entonces
        assertEquals(new BigDecimal("1.05"), resultado);
    }
	
	
Aca podemos jugar con los valores y hacer varias pruebas y mostrar los cambios en dichos casos.
			  
			  