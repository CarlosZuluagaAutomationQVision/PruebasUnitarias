Buenos días, vamos a trabajar con aplicaciones SpringBoot: estas aplicaciones son:......

Lo ideal es que todos tengamos configurada la variable de entorno de Maven.

1. Crear proyecto Java+Maven

2. Descargar Dependencias:
----------------------------------------------------------------------

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.1.RELEASE</version>
    <relativePath/>
  </parent>

  <properties>
    <java.version>1.8</java.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>RELEASE</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
----------------------------------------------------------------------

3. Actualizar Maven 

4. Crear package main/java/junitdemo

----------------------------------------------------------------------

	4.1 Crar Clase con el metodo Sumar: 
	
	@Service
		public class ServicioCalculadora {
		public int sumar(final int a, final int b){
    return a + b;
	}
	
----------------------------------------------------------------------
	4.2 Crear Aplicacion SpringBoot
	
	@SpringBootApplication
	public class JunitsDemoApplication implements CommandLineRunner {

	@Autowired									  -- Explicar que hace este Tag
	ServicioCalculadora servicioDeCalculadora;

	public static void main(String[] args) {	  
		SpringApplication.run(junitdemo.JunitsDemoApplication.class, args);
	}											 
		-- Vemos que tenemos un main que nos permite ejecutar la siguiente Pieza de codigo: 
			@Override: que vemos que lo unico que hace es realizar la suma entre los valores de a y b e imprime ese resultado.

	@Override
	public void run(String... args) throws Exception {
	final int a=7;
    final int b=4;

    System.out.println(String.format("Resultado: %d", servicioDeCalculadora.sumar(a, b)));
	}
	
	-- Correr Test, podemos ver que de esta manera ya tenemos una "prueba para el metodo de sumar" ya que estamos viendo el resultado y este coincide con lo esperado.
	¿Pero que sucede si el codigo cada vez es mas complejo?, podemos ver que lo que estariamos realizando son un monton de pruebas manuales, ademas de que estariamos violando la responsabilidad unica de clase ya que esta solamente debe ocuparse de permitir correr la aplicacion y no de imprimir los resultados esperados para despues de forma manual entrar a revisar que todo ande bien.
	
	En este sentido vamos a crear una prueba unitaria para asegurarnos de que el metodo de suma este comportandose de forma correcta.

----------------------------------------------------------------------
		
5. Crear package src/java/junitdemo
	Crear Clase con el metodo Junit:
	
	@RunWith(SpringRunner.class)   Tag: -- Nos permite ejecutar pruebas test e inyectar codigo dentro de las pruebas
	@SpringBootTest				   Tag: -- Idicamos que tenemos un Test de un SpringBoot					
	public class PruebaServicioCalculadora {

		@Autowired				   Tag:
		ServicioCalculadora servicioCalculadora;

		@Test					    Tag: -- Nos permite ejecutar desde el ide la prueba.
		public void pruebaMetodoSuma(){
		System.out.println("Prueba de metodo suma");
		--- Precondiciones: //Dado que tenemos dos entero  
		int a= 7;
		int b= 5;;
	
		--- Acciones: //Cuando ejecutamos el metodo suma
		int resultado = servicioCalculadora.sumar(a, b);
	
		--- Aserciones: //Entonces verificamos el resultado
		assertEquals(12, resultado); -- Gracias a Junit podemos implementar este tipo de aserciones.
  }
  -- Correr Test, luego hacerlo fallar para mostrar diferencias y como actua el Assert.

Esto es una prueba básica de SpringBoot con Junit

----------------------------------------------------------------------	
  Pasar a rama feature/Demo2
6. Ahora vamos a poner un poco más de complejidad, 

vamos a agregar en la clase ServicioCalculadora una lista para almacenar el historial de las ejecuciones del metodo suma, quedando toda la clase de esta manera:

public class ServicioCalculadora {

  List<String> historiasEjecuciones = new LinkedList<>();

  public int sumar(final int a, final int b){
    int resultado = a + b;
    historiasEjecuciones.add(String.format("suma: %d + %d = %d", a, b, resultado));
    return resultado;
  }
  
  
7. Dentro de la misma prueba Unitaria que tenemos ya creada Agregamos otro nuevo Assert para garantizar que el historial de ejecuciones este funcionando correctamente -- Agragamos las siguientes lineas de codigo: 

//Entonces verificamos el resultado
    assertEquals(11, resultado);
	
	--System.out.println(String.format("Historial: %d", servicioCalculadora.historiasEjecuciones.size()));
	--assertTrue(servicioCalculadora.historiasEjecuciones.size() == 1);
	
-- (Ejecutamos el test y este falla ya que el tamaño obtenido no es de 1)
 Como estamos realizando la validacion  con el assertTrue y este evalua condiciones no nos indica explicitamente por que fallo.

 Notemos entonces como este AssertTrue podria sernos muy util en otro tipo de validaciones, aceptamos la sugerencia del Ide y volvemos a probar, para ver que esta fallando por que esperaba un 1 pero obtiene un 2.
		Esto nos genera una alerta en el codigo y vemos que este metodo de suma se esta ejecutando 2 veces efectivamente, 1 en el "Test" y el otro en la clase "JunitsDemoApplication"
 
	 
 Borramos la ejecución del metodo en la clase JunitsDemoApplication, ajustamos y volvemos a correr el test.
	
	
8. Ahora vamos a crear otro Test para probar la suma entre numeros negativos:

	(Duplicamos el anterior Metodo y ajustamos lo necesario quedando asi): 
	
	 @Test
		--public void pruebaMetodoSumaNegativos(){
		--System.out.println("Prueba de metodo suma con valores negativos");
		--//Dado que tenemos dos enteros negativos
		--int a= -7;
		--int b= -4;
	
		//Cuando ejecutamos el metodo suma
		int resultado = servicioCalculadora.sumar(a, b);
	
		//Entonces verificamos el resultado
		--assertEquals(-11, resultado);
		System.out.println(String.format("Historial: %d", servicioCalculadora.historiasEjecuciones.size()));
		assertEquals(1, servicioCalculadora.historiasEjecuciones.size());
  }
 
(ejecutamos de forma independiente los Test notando que pasan ambos OK, ahora ejecutamos toda la clase notando que el primero pasa bien pero el segundo no, ya que este no tendria un Historial de uno si no de dos, probamos en conjunto y de forma individual notando que en conjunto pasa pero de forma individual no)

 hacemos la reflexion de tener que aumentar en 1 el valor esperado en cada ejecucion de cada Test lo que haria inmantenible el codigo a medida que los test crezcan, y damos paso a el uso de los tags de los Before y los After:
 
	
9. Implementar Before y After:
  @Before: 
  --Esta anotación nos sirve para indicarle a nuestros Test que antes de cada ejecución, siempre se va a ejecutar el o los metodos aca utilizados
  
  @Before
  public void antesCadaTest(){
    System.out.println("Before");
    servicioCalculadora.historiasEjecuciones = new LinkedList<String>();
    System.out.println(String.format("Historial antes de cada prueba: %d", servicioCalculadora.historiasEjecuciones.size()));
  }

----(Ejecutamos y mostramos como funciona este @Before)
	
  @After: 
  --Esta anotación al igual que los @Before nos sirve para indicarle a nuestros ya no que antes de cada ejecución, sino que siempre despues de cada Test, se realicen las acciones definidas dentro del mismo.
  
  @After
  public void despuesCadaTest(){
    System.out.println("After");
    System.out.println(String.format("Historial despues de cada prueba: %d", servicioCalculadora.historiasEjecuciones.size()));
  }
  
  (Ejecutamos y mostramos como funciona este @After)
  
  
10. Hay otras anotaciones que me gustaria mostrarles @BeforeClass y @AfterClass, las cuales diferen con las que acabamos de ver en que esta se ejecutan solamente al iniciar o al terminar de ejecutarse toda la clase.

  @BeforeClass
  public static void antesTodaClass(){
    System.out.println("BeforeClass");
  }
  
  @AfterClass
  public static void despuesTodaClass(){
    System.out.println("AfterClass");
  }

(Ejecutar todo la clase Tets y mostrar como se ejecutan los After y los Before de clases)
	En este caso en particular solamente estamos imprimiendo, pero estos BeforeClass y AfterClass son super utiles para inicializar y cerrra conexiones de Bases de datos en clases especificas a probar y asi ahorrar memoria y realizar los llamados en momentos especificos.
	
11. Ahora agreguemos estos archivos para tener un log mas limpio: 
	(Click derecho en package test, new directory, resources)
	Archivos: 
	application.properties: 
		logging.level.org.springframework=OFF
		logging.level.root=OFF
		spring.main.banner-mode=OFF
	
	logback-test.xml:
		<?xml version="1.0" encoding="UTF-8"?>
		<configuration>
		<include resource="org/springframework/boot/logging/logback/base.xml" />
		<logger name="org.springframework" level="OFF"/>
		</configuration>
	
 Miremos como se apagan los logs de SpringBoot con estos archivo y el log queda mas limpio de esta manera, (volvemos a explicar como funcionan los Tags de Before, After, BeforeClass y AfterClass)

----------------------------------------------------------------------	
  Pasar a rama feature/Demo3
  
Muy bien hasta el momento hemos realizado pruebas con valores enteros ahora vamos a mirar como trabajar con valores flotantes: 
  
12. Vamos a la clase de ServicioCalculadora y agregamos el metodo de multiplicacion:
  
  public float multiplicar(final float a, final float b) {
    float resultado = a * b;
    historiasEjecuciones.add(String.format("Multiplicar: %f x %f = %f", a, b, resultado));
    return resultado;
  }
  
13. Ahora vamos a crear el Test:
	(Cuando estamos creando todo como Flotante nos damos cuenta de que el assertEquals aparece como deprecado, esto se debe a que el metodo esta esperando el valor del delta)
	
	este valor delta nos sirve para indicar el rango que le vamos a dar al valor para una posible variación.
	
	--Sacamos calculadora para ver cuanto debe dar la multiplicacion: 15.968
	
	--Ejecutar con el assert: (15.9, resultado, 0.0)
	Para ver que falla por temas de decimales.
	
	--Luego ejecutar con el delta 0.1: (15.9, resultado, 0.1)
	Y mostrar como funciona bn,
	
En este sentido vemos la importancia de implementar bien nuestros assert ya que si estamos desarrollando aplicaciones en las cuales perder cantidades pequeñas de dinero puede ocacionar grandes desfaces debemos ser mas estrictos en los valores de entrada y de salida.

Por otro lado miremos que ubiese pasado si no utilizamos el Before para el tema de reiniciar el LinkedList<> a cada test que vamos aumentando tendriamos que venir a cambiar el valor esperado y en temas de mantenibilidad de nuestras pruebas esto podria empezar a costarnos cada vez mas.

14. Implementar el metodo de division y la exception: 

    public double dividir(final double a, final double b) throws DivisionEntreCeroException {
    if(b== 0) throw new DivisionEntreCeroException();
	
	-- Esta exception la implementamos para garantizar que no van a dividir entre cero ya que Java es capaz de hacerlo y retorna como resultado infinito y ps no es lo ideal, al menos para nuestra calculadora.

		double resultado = a / b;
    historiasEjecuciones.add(String.format("Dividir: %f / %f = %f", a, b, resultado));
    return resultado;
	}

 private class DivisionEntreCeroException extends Throwable {}
 
 
15. Implemntar test de division y probar todo: 

	@Test
	public void pruebaDivision() throws DivisionEntreCeroException {
    System.out.println("Prueba de metodo dividir");
    //Dado que tenemos dos numeros flotantes
    double a= 3.0;
    double b= 1.0;

    //Cuando ejecutamos el metodo multiplicar
    double resultado = servicioCalculadora.dividir(a, b);

    //Entonces verificamos el resultado
    assertEquals(3, resultado, 0.0);
    System.out.println(String.format("Historial: %d", servicioCalculadora.historiasEjecuciones.size()));
    assertEquals(1, servicioCalculadora.historiasEjecuciones.size());
  }
	
16. Ahora vamos a implementar el Test de division entre Cero, identico al anterior pero el b=0:

	@Test
    public void pruebaDivisionEntreCero() throws DivisionEntreCeroException {
    System.out.println("Prueba de metodo dividir");
    //Dado que tenemos dos numeros flotantes
    double a= 3.0;
  ----  double b= 0;

    //Cuando ejecutamos el metodo multiplicar
    double resultado = servicioCalculadora.dividir(a, b);

    //Entonces verificamos el resultado
    assertEquals(3, resultado, 0.0);
    System.out.println(String.format("Historial: %d", servicioCalculadora.historiasEjecuciones.size()));
    assertEquals(1, servicioCalculadora.historiasEjecuciones.size());
  }
	
	Ejecutamos y vemos como este escenario de prueba va a fallar.
	
Ahora bien que debemos hacer para garantizar la cobertura total de las pruebas, debemos ajustar este Tag del Test de la siguiente manera: @Test (expected = DivisionEntreCeroException.class)
	
	Volvemos a probar y vemos como el escenario queda en Passed esta vez, corremos todo de nuevo y vemos como todos los escenarios estan OK
	
Ahora vamos mirar que sucede si en la clase ServicioCalculadora comentamos la exception, la comentamos y volvemos a correr los escenarios, vemos como el escenario falla ya que esta esperando una exception pero esta nunca se levanta, de esta manera estamos garantizando que estamos probando nuestros metodos asi como las exception de los mismos.

17. Ahora miremos otra herramienta del Ide, es la ejecucion con coverage; 

	Lanzamos toda la class de los test y vemos como marca el 100% de covertura de las pruebas unitarias de la class servicioCalculadora -- Vamos a ver la barrita verde de la clase servicioCalculadora.
	
Usemos el tag @Ignore y volvemos a lanzar el test con coverage y vemos como la covertura cambio. -- Vamos a ver la barrita verde de la clase servicioCalculadora.

Volvemos a Ajustar para que todo quede OK

18. Ahora miremos para terminar esta primera parte de Junit y SpringBoot el AssertTrue:

Lo implementamos en cada uno de los Test y mostramos como funciona y como falla
	assertTrue(servicioCalculadora.historiasEjecuciones.get(0).startsWith("Suma"));	
	
